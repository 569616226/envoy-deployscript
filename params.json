{
  "name": "Envoy-deployscript",
  "tagline": "Laravel Envoy Deployment Script",
  "body": "# envoy-deployscript\r\nLaravel Envoy Deployment Script\r\n\r\nBase on [papertank/envoy-deploy](https://github.com/papertank/envoy-deploy)\r\n\r\nInspired by\r\n\r\n* [papertank/envoy-deploy](https://github.com/papertank/envoy-deploy)\r\n* [Deploying with Envoy (Cast)](https://serversforhackers.com/video/deploying-with-envoy-cast)\r\n* [Enhancing Envoy Deployment](https://serversforhackers.com/video/enhancing-envoy-deployment)\r\n* [An Envoyer-like deployment script using Envoy](https://iatstuti.net/blog/an-envoyer-like-deployment-script-using-envoy)\r\n* [Rocketeer](http://rocketeer.autopergamene.eu/)\r\n* [Deploy your app to DigitialOcean from Codeship using Envoy](http://laravelista.com/deploy-your-app-to-digitialocean-from-codeship-using-envoy/)\r\n\r\n\r\nThis repository includes an Envoy.blade.php script that is designed to provide a very basic \"zero-downtime\" deployment option using the open-source [Laravel Envoy](http://laravel.com/docs/5.1/envoy) tool.\r\n\r\n## Requirements\r\n\r\nThis Envoy script is designed to be used with Laravel 5 projects,however you could modify for other type of projects.\r\n\r\nNotice that your local server/machine should configured to use [SSH Key-Based Authentication](https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server).\r\n\r\n## Installation\r\n\r\nYour must have Envoy installed using the Composer global command:\r\n\r\n>composer global require \"laravel/envoy=~1.0\"\r\n\r\n## Usage\r\n\r\n### Setup\r\n\r\n1. Download or clone this repository\r\n\r\n2. then copy envoy.config.example.php and Envoy.blade.php to your laravel project root directory.(e.g ~/code/mysite)\r\n\r\n3. then rename(or symbolic link) envoy.config.example.php to envoy.config.php and edit the envoy.config.php file with the ssh login info, Git repository, server path for your app.\r\nThe `$deploy_basepath` (server base path) should already be created in your server with right permissions(e.g owner:www-data,read/write).\r\nYou should set your website root directory (in vhost / server config) to `$deploy_basepath/$appname`/current/public (e.g /var/www/mysite/current/public)\r\n\r\n4. add `.envoydeploy/` directory to your .gitignore file in your laravel project root if you use git as your source control software.\r\n\r\n5. you should create a .env.production file (dot env settings file ) in your laravel project root directory that will deploy to remote server\r\notherwise if you specify the Laravel environment (e.g development/testing) create or symbolic the corresponding env file (e.g .env.development/.env.testing)\r\nand you could add the dot env settings file to your .gitignore file.\r\n\r\n6. you could create an directory `extra/custom/` in your laravel project root, the deploy script will copy every directories and files in it to overwrite the files in target server.\r\n\r\n>for example:\r\n\r\n>your created file:\r\n\r\n>`extra/custom/node_modules/laravel-elixir/Config.js`\r\n\r\n>after deploy it will copy and overwrite to\r\n\r\n>`($deployed_project_root)/node_modules/laravel-elixir/Config.js`\r\n\r\n>it's usually we use this for custom laravel-elixir config setting and other staff.\r\n\r\n### Configuration\r\n\r\nYou could tweak your **envoy.config.php** for your application situation.\r\n\r\n#### $pack_mode\r\n\t\r\n> **local** : checkout code and prepare the app code package locally,then pack and rsync/scp packed files to remote and extract on remote (good for small vps but scp cost bandwidth)\r\n\r\n> **remote** : checkout code and prepare the app code package on remote server (fast for your server have good network connection)\r\n\r\n#### $deploy_mode\r\n\r\n> **incr** : sync new code to current running path (if you have lot of code and resource files in your project ,you may choose this mode)\r\n\r\n> **link** : link new release path to current running path (if you want light and quick code deployment, you may choose this mode)\r\n\r\n\r\n### Deploy-Init\r\n\r\nWhen you're ready with the config, run the init task on your local machine by running the following in the repository directory\r\n\r\n>envoy run deploy_init\r\n\r\nYou can specify the Laravel environment (for artisan:migrate command) and git branch as options\r\n\r\n>envoy run deploy_init --branch=develop --env=development\r\n\r\nYou only need to run the init task once.\r\n\r\nThe init task creates a `.env` file in your app root path (e.g /var/www/mysite/.env )- make sure and update the environment variables appropriately.\r\n\r\n### Deploy\r\n\r\nEach time you want to deploy simply run the deploy task on your local machine in the repository direcory\r\n\r\n>envoy run deploy\r\n\r\nYou can specify the Laravel environment (for artisan:migrate command) and git branch as options\r\n\r\n>envoy run deploy --branch=develop --env=development\r\n\r\n### Rollback\r\nIf you found your last deployment likely have some errors,you could simply run the rollback task on your local machine in the repository direcory\r\n\r\n>envoy run rollback\r\n\r\nnotice that will only relink your *current* release to previous release,\r\nit will NOT do the database migrate rollback.\r\n\r\nif you wanna rollback database migration you could run **BEFORE** you run *rollback* task:\r\n>envoy run dbrollback --branch=master --env=production\r\n\r\nif you run *rollback* task twice ,you will got *current* release still symbolic link to last release.\r\n\r\n## How it Works\r\n\r\nYour `$deploy_basepath` directory will look something like this.\r\n```\r\n\tmysite/\r\n\tmysite2/\r\n\tmysite3/\r\n```\r\nYour `$deploy_basepath/$app_name` directory will look something like this after you init and then deploy.\r\n\r\n```\r\n\treleases/release_20150717032737/\r\n\treleases/release_20150717034646/\r\n\tcurrent -> ./releases/release_20150717034646\r\n\tshared/storage/\r\n\ttmp/\r\n\t.env\r\n```\r\n\r\nAs you can see, the *current* directory is symlinked to the latest deployment folder\r\n\r\nInside one of your deployment folders looks like the following (excluded some laravel folders for space)\r\n\r\n```\r\n\tapp/\r\n\tartisan\r\n\tboostrap/\r\n\tpublic/index.php\r\n\tcomposer.json\r\n\t.env -> ../../.env\r\n\tstorage -> ../../shared/storage\r\n\tvendor/\r\n```\r\n\r\nThe deployment folder .env file and storage directory are symlinked to the parent folders in the main (parent) path.\r\n\r\n## Feature\r\n\r\n* You could deploy multi projects with different $app_name and config settings on same target server.\r\n\r\n* To explore more feature by RTFC, and custom task as you wish in your project.\r\n\r\n## Notice\r\n\r\n* http/https protocol might be ask for password for your private repos\r\nand that will break the git clone progress,\r\nuse git protocol and setup a deploy key on your server and SCM service instead\r\n(e.g github repo ->settings->Deploy keys and set `$source_repo = 'git@github.com:user/mysite.git'` in your *envoy.config.php*)\r\n\r\n* the Task `cleanupoldreleases_on_remote` sometime may couldn't clean up all old release since your project contains too many files.\r\nand you could tweak keeps releases by change the config settings var `$release_keep_count`.\r\n\r\n\r\n## Example Usage\r\n\r\nyou could [Deploy your app to DigitialOcean from Codeship using Envoy](http://laravelista.com/deploy-your-app-to-digitialocean-from-codeship-using-envoy/)\r\nwith this Envoy.blade.php and envoy.config.php script :\r\n\r\n>~/.composer/vendor/bin/envoy run deploy\r\n\r\n\r\nif your laravel project runs on a small RAM (e.g 512MB) droplet.\r\n\r\nyou could change config settings `$pack_mode = 'local';`.\r\n\r\n\r\n## Todo\r\n\r\n* Make backup faster.\r\n\r\n## Contributing\r\n\r\nPlease submit improvements and fixes :)\r\n\r\n## Author\r\n\r\n[Nick Fan](http://axiong.me)\r\n\r\n",
  "google": "UA-65427115-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}